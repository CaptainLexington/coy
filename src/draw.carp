(use IO)
(use System)
(use Int)
(use Double)
(use Array)

(load "Vector.carp")
(use Vector2)

(load "SDL.carp")
(load "SDL_image.carp")
(use SDL_Color)


(defmodule Draw
           (deftype Raster
             (Line [(Vector2 Int) (Vector2 Int) SDL_Color])
             ;(Border [(Vector2 Int) (Vector2 Int) SDL_Color])
             (Solid [(Vector2 Int) (Vector2 Int) SDL_Color])
             ;(Text [(Vector2 Int) (Vector2 Int) String SDL_Color])
             (Sprite [(Vector2 Int) (Vector2 Int) (Vector2 Int) (Ptr SDL_Texture) Double])
             )
           (use Raster)

           (defn render-line [rend p1 p2 color]
                 (do
                   (SDL.set-render-draw-color rend (r color) (g color) (b color) (a color))
                   (SDL.render-draw-line rend @(Vector2.x p1) @(Vector2.y p1) @(Vector2.x p2) @(Vector2.y p2))))

           (defn render-solid [rend p1 d color]
                 (do
                   (SDL.set-render-draw-color rend (r color) (g color) (b color) (a color))
                   (SDL.render-fill-rect rend (address (SDL.rect @(Vector2.x p1) @(Vector2.y p1) @(Vector2.x d) @(Vector2.y d))))))

           (defn render-sprite [rend p1 p2 d sprite rotation]
                 (SDL.render-copy-ex rend
                                     sprite
                                     (address (SDL.rect @(Vector2.x p2)
                                                        @(Vector2.y p2)
                                                        @(Vector2.x d)
                                                        @(Vector2.y d)))
                                     (address (SDL.rect @(Vector2.x p1)
                                                        @(Vector2.y p1)
                                                        @(Vector2.x d)
                                                        @(Vector2.y d)))
                                     rotation
                                     (address (SDL.point (/ @(Vector2.x d) 2) (/ @(Vector2.y d) 2)))
                                     SDL.flip-none))

           (defn render-raster [rend raster]
                 (match raster
                        (Line p1 p2 color) (render-line rend &p1 &p2 &color)
                        (Solid p1 d color) (render-solid rend &p1 &d &color)
                        (Sprite p1 p2 d img rot) (render-sprite rend &p1 &p2 &d img rot)))

           (defn draw [rend rasters]
                 (do 
                   (SDL.set-render-draw-color rend 0 0 0 255)
                   (SDL.render-clear rend)
                   (foreach [r rasters]
                            (render-raster rend @r)))))

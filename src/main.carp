(use IO)
(use System)
(use Int)
(use Double)
(use Array)

(load "SDL.carp")
(load "SDL_image.carp")

(load "src/resources.carp")
(use ResourceManager)
(use ResourceManager.ResourceData)

(load "src/input.carp")
(use Input)
(use Input.InputEvent)


(Project.config "title" "Game")

(def rand-max 400)

(defn r []
  (the Int (random-between 0 rand-max)))

(defn random-lines []
  (let [p1 (SDL.point (r) (r))
        p2 (SDL.point (r) (r))
        p3 (SDL.point (r) (r))]
    [p1 p2 p3 p1]))


(deftype Message
  NoOp
  Quit
  Pause
  Unpause
  PrintBang
  MoveBoxes
  )

(use Message)


(deftype World
  [msg Message
   state Int
   app SDLApp
   resources Resources
   bindings (Map InputEvent Message)]
  )
(use World)


(defn draw [app rend state-ref]
  (let [rect (SDL.rect 32 32 (- 512 64) (- 512 64))]
    (do
      (SDL.set-render-draw-blend-mode rend SDL.blend-mode-add)
      (SDL.set-render-draw-color rend 0 0 0 255)
      (SDL.render-clear rend)
      (SDL.set-render-draw-color rend 200 250 255 255)
      (SDL.render-fill-rect rend (address rect))
      (SDL.set-render-draw-color rend 100 50 255 155)
      (let [x @(state state-ref)
            rects [(SDL.rect x 48 16 16)
                   (SDL.rect (* x 2) 80 16 16)
                   (SDL.rect (* x 4) 112 16 16)
                   (SDL.rect (* x 8) 144 16 16)]
            n (length &rects)]
        (SDL.render-fill-rects rend (raw rects) n))
      (SDL.set-render-draw-color rend 255 50 100 255)
      (for [x 0 512 16]
        (do
          (SDL.render-draw-line rend x 0 512 512)
          (SDL.render-draw-line rend 512 (+ 256 (/ x 2)) 0 512)))
      (SDL.set-render-draw-color rend 0 0 0 255)
      (let [lines (random-lines)
            n (length &lines)]
        (SDL.render-draw-lines rend (raw lines) n))
      (let [img (get-png (resources state-ref) "./img/square.png")]
        (SDL.render-copy-ex rend
                            img
                            (address (SDL.dimensions img))
                            (address (SDL.rect 100 100 300 300))
                            (* 0.1 (from-int (SDL.get-ticks)))
                            (address (SDL.point 150 150))
                            SDL.flip-none)))))

(defn event-handler [app state event]
  (let [et (SDL.Event.type event)
        maybe-message (value-by-event (bindings &state) event)]
    (if (= et SDL.Event.quit)
      (set-msg state (Quit))
      (match maybe-message
             (Maybe.Just message) (set-msg state message)
             (Maybe.Nothing) state))))

(defn tick [world]
      (set-msg
        (match @(msg &world)
               PrintBang (do (println "!")
                           world)
               MoveBoxes (let [mouse-state (SDL.MouseState.get)]
                           (set-state world @(SDL.MouseState.x &mouse-state)))
               Quit (do (SDLApp.stop (app &world))
                      world)
               _ world)
        (NoOp)))

(defn main []
  (let [sdl-app (SDLApp.create "~ CARP ~" 512 512)
        rend @(SDLApp.renderer &sdl-app)
        resources (resources-hardcoded rend)
        bindings (bindings-from-array &[(Pair.init (KeyDown SDL.Keycode.escape)
                                                   (Quit))
                                        (Pair.init (KeyDown SDL.Keycode.backspace)
                                                   (PrintBang))
                                        (Pair.init (MouseMotion)
                                                   (MoveBoxes))])
        initial-state (World.init (NoOp)
                                  0
                                  sdl-app
                                  resources
                                  bindings
                                  )]
    (do 
      (println "?")
      (SDLApp.run-with-callbacks (app &initial-state) event-handler tick draw initial-state))))

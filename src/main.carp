(use IO)
(use System)
(use Int)
(use Double)
(use Array)

(load "Vector.carp")
(use Vector2)

(load "SDL.carp")
(load "SDL_image.carp")


(load "src/resources.carp")
(use ResourceManager)
(use ResourceManager.ResourceData)


(load "src/draw.carp")
(use Draw.Raster)


(Project.config "title" "Game")

(def rand-max 400)

(defn r []
  (the Int (random-between 0 rand-max)))

(defn random-lines []
  (let [p1 (SDL.point (r) (r))
        p2 (SDL.point (r) (r))
        p3 (SDL.point (r) (r))]
    [p1 p2 p3 p1]))


(deftype Message
  NoOp
  Quit
  Pause
  Unpause
  PrintBang
  MoveBoxes
  )

(use Message)

(deftype GameState
  [boxes-x Int
   fish-rot Double])
(use GameState)

(deftype World
  [msg Message
   state GameState
   real-time Int
   game-time Int
   app SDLApp
   resources Resources
   bindings (Map InputEvent Message)]
  )
(use World)

(defn red-lines [res x]
      (let [line-color (SDL.rgb 255 50 100)]
        (concat
          &[res
             [(Line (Vector2.init @x 0) (Vector2.init 512 512) line-color)
              (Line (Vector2.init 512 (+ 256 (/ @x 2))) (Vector2.init 0 512) line-color)]])))

(defn draw [app rend state-ref]
  (let [bg-color (SDL.rgb 0 0 0)
        window-color (SDL.rgb 200 250 255)
        window (Solid (Vector2.init  32 32) (Vector2.init (- 512 64) (- 512 64)) window-color)
        x @(boxes-x (state state-ref))
        box-color (SDL.rgb 100 50 255)
        box-size (Vector2.init 16 16)
        boxes [(Solid (Vector2.init x 48) box-size box-color)
               (Solid (Vector2.init (* x 2) 80) box-size box-color)
               (Solid (Vector2.init (* x 4) 112) box-size box-color)
               (Solid (Vector2.init (* x 8) 144) box-size box-color)]
        lines (reduce &red-lines [] &(range-or-default 0 512 16))
        img (get-png (resources state-ref) "./img/square.png")
        sprite (Sprite (Vector2.init 100 100) (Vector2.init 300 300) img @(fish-rot (state state-ref)))]
    (Draw.draw rend &(concat &[[window] lines [sprite] boxes]))))

(defn event-handler [app world event]
  (let [et (SDL.Event.type event)
        maybe-message (value-by-event (bindings &world) event)]
    (if (= et SDL.Event.quit)
      (set-msg world (Quit))
      (match maybe-message
             (Maybe.Just message) (set-msg world message)
             (Maybe.Nothing) world))))

(defn update-boxes-x [state]
                (let [mouse-state (SDL.MouseState.get)]
                  (set-boxes-x state
                               @(SDL.MouseState.x &mouse-state))))


(defn update-world [world message]
      (match @message
             PrintBang (do (println "!")
                         world)
             MoveBoxes (update-state world &update-boxes-x)
             Quit (do (SDLApp.stop (app &world))
                    world)
             _ world))

(defn advance-fish-rot [state game-time]
      (set-fish-rot state
                    (* 0.1 (from-int game-time))))

(defn advance-world [world]
      (let [sdl-time (SDL.get-ticks)
            game-time @(game-time &world)
            state @(state &world)]
        (=> world
            (set-real-time sdl-time)
            (set-game-time (/ sdl-time 5))
            (set-state (advance-fish-rot state game-time)))))

(defn tick [world]
      (=> world
          ; update-world changes the world
          ; according to some Message
          (update-world (msg &world))
          (set-msg (NoOp))
          ; advance-world changes the world
          ; according to the passage of time
          advance-world))

(defn main []
  (let [sdl-app (SDLApp.create "~ CARP ~" 512 512)
        rend @(SDLApp.renderer &sdl-app)
        resources (resources-hardcoded rend)
        bindings (bindings-from-array &[(Pair.init (KeyDown SDL.Keycode.escape)
                                                   (Quit))
                                        (Pair.init (KeyDown SDL.Keycode.backspace)
                                                   (PrintBang))
                                        (Pair.init (MouseMotion)
                                                   (MoveBoxes))])
        sdl-time (SDL.get-ticks)
        initial-state (World.init (NoOp)
                                  (GameState.init 0
                                                  0.0)
                                  sdl-time
                                  (/ sdl-time 5)
                                  sdl-app
                                  resources
                                  bindings
                                  )]
    (do 
      (println "?")
      (SDLApp.run-with-callbacks (app &initial-state) event-handler tick draw initial-state))))

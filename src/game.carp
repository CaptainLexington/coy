(load "src/time.carp")
(use Time)
(use Time.GameTime)
(load "src/draw.carp")
(use Draw.Raster)

(load "SDL_ttf.carp")


(defmodule Game
           (deftype (Game a)
             [app SDLApp
              real-time Int
              game-time GameTime
              ticks Int
              state a])
           (use Game)

           (defn from-realtime [rt gran]
                 (init (/ rt gran)
                                gran))

           (defn simple-2d-game [app state]
                 (let [sdl-time (SDL.get-ticks)]
                   (Game.init
                     app
                     sdl-time
                     (from-realtime sdl-time 5)
                     0
                     state)))

           (defn message-reducer [update-fn]
                 (fn [res message]
                     (~update-fn res message)))

           (def title "A Coy Game")
           (def width 1024)
           (def height 768)

           (doc run-2d-game "given an update-fn and a Game value, run the game")
           (defn run-2d-game [initialize-fn update-fn subscribe-fn raster-fn tick-type]
                 (let-do [sdl-app &(SDLApp.create title width height)
                          rend @(SDLApp.renderer sdl-app)
                          ttf-ok (TTF.ok? (TTF.init))
                          game &(simple-2d-game @sdl-app (~initialize-fn sdl-app))
                          target-dt (/ 1000 @(SDLApp.fps sdl-app))]
                         (while true
                                (let [messages (copy-map
                                                 &(fn [msg] (~subscribe-fn game msg)) 
                                                 &(SDL.Event.all))]
                                  (do
                                    (set! game &(reduce &(message-reducer update-fn)
                                                           @game
                                                           &(push-back messages @tick-type)))
                                    (let-do [dt (- (SDL.get-ticks) @(real-time game))
                                                time-left  (- target-dt dt)]
                                            (when (pos? time-left)
                                              (SDL.delay time-left)))
                                    (set-real-time! game (SDL.get-ticks))
                                    (set-game-time! game (from-realtime (SDL.get-ticks)
                                                                        @(granularity (game-time game))))
                                    (set-ticks! game (inc @(ticks game)))
                                    (Draw.draw rend &(~raster-fn (state game)))
                                    (SDL.render-present rend)))))))

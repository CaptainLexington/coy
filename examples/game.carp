; A recreation of examples/game.carp
; from the official Carp repo

(use IO)
(use System)
(use Int)
(use Double)
(use Array)

(load "Vector.carp")
(use Vector2)

(load "SDL.carp")
(load "SDL_image.carp")
(load "SDL_ttf.carp")


(load "src/resources.carp")
(use ResourceManager)
(use ResourceManager.ResourceData)

(load "src/input.carp")
(use Input)
(use Input.InputEvent)

(load "src/draw.carp")
(use Draw.Raster)

(load "src/colors.carp")

(load "src/time.carp")
(use Time)
(use Time.GameTime)

(load "src/game.carp")
(use Game)
(use Game.Game)

(Project.config "title" "Game")

(def rand-max 400)

(defn r []
  (the Int (random-between 0 rand-max)))

(defn random-lines []
  (let [p1 (SDL.point (r) (r))
        p2 (SDL.point (r) (r))
        p3 (SDL.point (r) (r))]
    [p1 p2 p3 p1]))


(deftype Message
  NoOp
  Quit
  Pause
  Unpause
  PrintBang
  MoveBoxes
  )

(use Message)

(deftype State
  [logo (Ptr SDL_Texture)
   hope (Ptr TTF_Font)
   boxes-x Int
   fish-rot Double])
(use State)

(defn red-lines [res x]
      (let [line-color Colors.radical-red]
        (concat
          &[res
             [(Line (Vector2.init @x 0) (Vector2.init 512 512) line-color)
              (Line (Vector2.init 512 (+ 256 (/ @x 2))) (Vector2.init 0 512) line-color)]])))

(defn get-rasters [state-ref]
  (let [bg-color Colors.black
        window-color Colors.turquoise-green
        window (Solid (Vector2.init  32 32) (Vector2.init (- 512 64) (- 512 64)) window-color)
        x @(boxes-x state-ref)
        box-color Colors.dark-pastel-purple
        box-size (Vector2.init 16 16)
        boxes [(Solid (Vector2.init x 48) box-size box-color)
               (Solid (Vector2.init (* x 2) 80) box-size box-color)
               (Solid (Vector2.init (* x 4) 112) box-size box-color)
               (Solid (Vector2.init (* x 8) 144) box-size box-color)]
        lines (reduce &red-lines [] &(range-or-default 0 512 16))
        img (logo state-ref)
        sprite (Sprite (Vector2.init 100 100)
                       (Vector2.init 0 0)
                       (Vector2.init 300 300) @img @(fish-rot state-ref))
        text (Text (Vector2.init 256 256)
                   (Vector2.init 200 20)
                   @"Be Excellent to Each Other"
                   @(hope state-ref)
                   Colors.banana-yellow)]
    (concat &[[window] lines [sprite text] boxes])))


(def bindings
     (bindings-from-array &[(Pair.init (KeyDown SDL.Keycode.escape)
                                       (Quit))
                            (Pair.init (KeyDown SDL.Keycode.backspace)
                                       (PrintBang))
                            (Pair.init (MouseMotion)
                                       (MoveBoxes))]))

(defn subscribe [game event]
      (let [et (SDL.Event.type event)
               maybe-message (value-by-event &bindings event)]
        (if (= et SDL.Event.quit)
          (Quit)
          (match maybe-message
                 (Maybe.Just message) message
                 (Maybe.Nothing) (NoOp)))))

(defn update-boxes-x [state]
                (let [mouse-state (SDL.MouseState.get)]
                  (set-boxes-x state
                               @(SDL.MouseState.x &mouse-state))))


(defn update-game [game message]
      (match @message
             PrintBang (do (println "!")
                         game)
             MoveBoxes (update-state game &update-boxes-x)
             Quit (do (SDLApp.stop (app &game))
                    game)
             _ game))

(defn advance-fish-rot [state game-time]
      (set-fish-rot state
                    (* 0.1 (from-int @(timestamp game-time)))))

(defn advance-game [game]
      (let [game-time (game-time &game)
            state @(state &game)]
        (set-state game (advance-fish-rot state game-time))))

(defn tick [game message]
      (do
        (println &(str (ticks &game)))
        (=> game
            (update-game message)
            advance-game)))

(defn initialize [sdl-app]
      (let [rend @(SDLApp.renderer sdl-app)
            logo (IMG.load-texture
                   rend
                   (cstr "./img/square.png"))
            font (TTF.open-font (cstr "./fonts/HopeGold.ttf") 30)
            initial-state (State.init logo
                                      font
                                      0
                                      0.0)]
        initial-state))

(defn main []
      (run-2d-game &initialize
                   &tick 
                   &subscribe
                   &get-rasters
                   &(NoOp)))
